function demo()
	-- new C# 对象
	local newGameObj = CS.UnityEngine.GameObject();
	local newGameObj2 = CS.UnityEngine.GameObject("helloworld"); -- 重载
	print(newGameObj, newGameObj2);

	--访问静态属性,方法
	local GameObject = CS.UnityEngine.GameObject
	print("UnityEngine.Time.deltaTime:", CS.UnityEngine.Time.deltaTime); -- 读静态属性
	CS.UnityEngine.Time.timeScale = 0.5; -- 写静态属性
	print("helloworld", GameObject.Find("helloworld")) -- 静态方法调用

	-- 访问成员属性，方法
	local MyClass = CS.MyClass
	local testobj = MyClass();
	testobj.DMF = 1024;
	print(testobj.DMF)
	testobj:Func()

	-- 访问基类属性，方法
	print(MyClass.num) -- 读基类静态属性
	MyClass.num = 2048 -- 写基类静态属性
	MyClass.BaseFunc() -- 基类静态方法
	print(testobj.BMF) -- 读基类成员属性
	testobj.BMF = 4096 -- 写基类成员属性
	testobj:MemberFunc()

	--复杂方法调用
	local ret, p2, p3, csfunc = testobj:ComplexFunc({x = 3, y = 'john'}, 100, function()print('i am lua callback') end)
	print('ComplexFunc ret:', ret, p2, p3, csfunc)
	csfunc()

	--重载方法调用
	testobj:TestFunc(100)
	testobj:TestFunc('hello')

	--操作符
	testobj2 = MyClass()
	testobj2.DMF = 2048;
	print('(testobj + testobj2).DMF =', (testobj + testobj2).DMF)

	-- 默认值
	testobj:DefaultValueFunc(1)
	testobj:DefaultValueFunc(3, 'hello', 'john');

	--可变参数
	testobj:VariableParamsFunc(5, 'hello', 'jhon');

	-- 扩展方法
	print(testobj:GetSomeData())
	print(testobj:GetSomeBaseData()) -- 访问基类的 Extension 方法
	testobj:GenericMethodOfString() -- 通过Extension methods实现访问泛化方法

	-- 枚举类型
	local e = testobj:EnumTestFunc(CS.TestEnum.E1)
	print(e, e == CS.TestEnum.E2);
	print(CS.TestEnum.__CastFrom(1), CS.TestEnum.__CastFrom('E1'))
	print(CS.MyClass.TestEnumInner.E3)
	assert(CS.BaseClass.TestEnumInner == nil)

	-- 委托 delegate
	testobj.TestDelegate('hello') -- 直接调用
	local function lua_deletage(str)
		print('TestDelegate in lua:', str);
	end
	testobj.TestDelegate = lua_deletage + testobj.TestDelegate --combine，这里演示的是C#delegate作为右值，左值也支持
	testobj.TestDelegate('hello')
	testobj.TestDelegate = testobj.TestDelegate - lua_deletage -- remove
	testobj.TestDelegate('hello')

	-- 事件
	local function lua_event_callback1() print('lua_event_callback1') end
	local function lua_event_callback2() print('lua_event_callback2') end
	testobj:TestEvent('+', lua_event_callback1)
	testobj:CallEvent()
	testobj:TestEvent('+', lua_event_callback2)
	testobj:CallEvent()
	testobj:TestEvent('-', lua_event_callback1)
	testobj:CallEvent()
	testobj:TestEvent('-', lua_event_callback2)

	-- 64位支持
	--local l = testobj.TestLong(11)
	--print(type(l), l, l + 100, 10000 + l)

	--typeof
	newGameObj:AddComponent(typeof(CS.UnityEngine.ParticleSystem));

	--cast
	local calc = testobj:GetCalc()
	print('assess instance of InnerCalc via reflection', calc:add(1,2))
	assert(calc.id == 100)
	cast(calc, typeof(CS.ICalc))
	print('cast to interface ICalc', calc:add(1,2))
	assert(calc.id == nil)
end

demo();

-- 协程下使用
local co = coroutine.create(function()
    print('------------------------------------------------------')
    demo()
end)
assert(coroutine.resume(co))